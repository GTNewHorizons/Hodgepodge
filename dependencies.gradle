configurations {
    transformedMod // Mods that can be transformed - used for compiling hodgepodge, but not necessary at runtime
    transformedMod.canBeConsumed = false
    transformedModCompileOnly
    transformedModCompileOnly.canBeConsumed = false

    // Add the transformed mod dependencies to the compilation and runtime classpaths, but don't publish them in the Maven metadata
    compileClasspath.extendsFrom(transformedMod, transformedModCompileOnly)
    runtimeClasspath.extendsFrom(transformedMod)
    testCompileClasspath.extendsFrom(transformedMod, transformedModCompileOnly)
    testRuntimeClasspath.extendsFrom(transformedMod)
}

dependencies {
    api("com.github.GTNewHorizons:GTNHLib:0.1.0:dev")

    transformedMod("com.github.GTNewHorizons:NotEnoughItems:2.5.4-GTNH:dev") // force a more up-to-date NEI version
    transformedMod("com.github.GTNewHorizons:Applied-Energistics-2-Unofficial:rv3-beta-310-GTNH")
    transformedMod("com.github.GTNewHorizons:Baubles:1.0.4:dev")
    // Transitive updates to make runClient17 work
    transformedMod("com.github.GTNewHorizons:ForgeMultipart:1.4.7:dev")
    transformedMod("com.github.GTNewHorizons:GT5-Unofficial:5.09.45.27:dev")
    transformedMod("com.github.GTNewHorizons:harvestcraft:1.1.5-GTNH:dev")
    transformedMod("com.github.GTNewHorizons:HungerOverhaul:1.1.0-GTNH:dev")
    transformedMod("com.github.GTNewHorizons:MrTJPCore:1.1.6:dev") // Do not update, fixed afterwards
    transformedMod("com.github.GTNewHorizons:Railcraft:9.15.5:dev") { exclude group: "thaumcraft", module: "Thaumcraft" }
    transformedMod("com.github.GTNewHorizons:TinkersConstruct:1.11.5-GTNH:dev")
    transformedMod(deobfCurse("bibliocraft-228027:2423369"))
    transformedMod("curse.maven:biomes-o-plenty-220318:2499612")
    transformedMod("curse.maven:cofh-core-69162:2388751")
    transformedMod("curse.maven:extra-utilities-225561:2264384")
    transformedMod(deobfCurse("extratic-72728:2299292"))
    transformedMod(deobfCurse("journeymap-32274:4500658"))
    transformedMod("curse.maven:travellers-gear-224440:2262113")
    transformedMod(deobfCurse("witchery-69673:2234410"))
    transformedMod(deobfCurse("ztones-224369:2223720"))
    transformedMod("net.industrial-craft:industrialcraft-2:2.2.828-experimental:dev")
    transformedMod("thaumcraft:Thaumcraft:1.7.10-4.2.3.5:dev")

    transformedModCompileOnly(deobfCurse("automagy-222153:2285272"))
    transformedModCompileOnly("com.github.GTNewHorizons:Galacticraft:3.1.2-GTNH:dev")
    transformedModCompileOnly("curse.maven:minechem-368422:2905830")
    transformedModCompileOnly("curse.maven:thermal-dynamics-227443:2388756")
    transformedModCompileOnly(deobfCurse("projecte-226410:2340786"))
    transformedModCompileOnly(deobfCurse("better-hud-286066:2523840"))
    transformedModCompileOnly("curse.maven:immersive-engineering-231951:2299019")
    // Contains an outdated copy of thaumcraft api that breaks class loading at runtime
    transformedModCompileOnly(deobfCurse("pams-harvest-the-nether-231262:2241397"))
    transformedModCompileOnly(deobfCurse("the-lord-of-the-rings-mod-legacy-423748:4091561"))
    transformedModCompileOnly(deobfNotch("https://mediafiles.forgecdn.net/files/2462/146/mod_voxelMap_1.7.0b_for_1.7.10.litemod"))
    transformedModCompileOnly(deobfCurse("xaeros-world-map-317780:4716737"))
}

// Replace when RFG support deobfuscation from notch mappings

import java.nio.file.Files
import java.nio.file.Paths
import java.util.zip.ZipEntry
import java.util.zip.ZipOutputStream

def deobfNotch(String sourceURL) {
    try {
        URL url = new URL(sourceURL)
        String fileName = url.getFile()

        //get rid of directories:
        int lastSlash = fileName.lastIndexOf("/")
        if (lastSlash > 0) {
            fileName = fileName.substring(lastSlash + 1)
        }
        //get rid of extension:
        if (fileName.endsWith(".jar") || fileName.endsWith(".litemod")) {
            fileName = fileName.substring(0, fileName.lastIndexOf("."))
        }

        String hostName = url.getHost()
        if (hostName.startsWith("www.")) {
            hostName = hostName.substring(4)
        }
        List parts = Arrays.asList(hostName.split("\\."))
        Collections.reverse(parts)
        hostName = String.join(".", parts)

        return deobfNotch(sourceURL, "$hostName/$fileName")
    } catch (Exception ignored) {
        return deobfNotch(sourceURL, "deobf/${sourceURL.hashCode()}")
    }
}

def deobfNotch(String sourceURL, String rawFileName) {
    String bon2Version = "2.5.1"
    String fileName = URLDecoder.decode(rawFileName, "UTF-8")
    String cacheDir = "$project.gradle.gradleUserHomeDir/caches"
    String bon2Dir = "$cacheDir/forge_gradle/deobf"
    String bon2File = "$bon2Dir/BON2-${bon2Version}.jar"
    String obfFile = "$cacheDir/modules-2/files-2.1/${fileName}.jar"
    String deobfFile = "$cacheDir/modules-2/files-2.1/${fileName}-deobf.jar"

    if (file(deobfFile).exists()) {
        return files(deobfFile)
    }

    String mappingsVer
    String remoteMappings = project.hasProperty('remoteMappings') ? project.remoteMappings : 'https://raw.githubusercontent.com/MinecraftForge/FML/1.7.10/conf/'
    if (remoteMappings) {
        String id = "${forgeVersion.split("\\.")[3]}-$minecraftVersion"
        String mappingsZIP = "$cacheDir/forge_gradle/maven_downloader/de/oceanlabs/mcp/mcp_snapshot_nodoc/$id/mcp_snapshot_nodoc-${id}.zip"

        zipMappings(mappingsZIP, remoteMappings, bon2Dir)

        mappingsVer = "snapshot_$id"
    } else {
        mappingsVer = "${channel}_$mappingsVersion"
    }

    download.run {
        src "https://github.com/GTNewHorizons/BON2/releases/download/$bon2Version/BON2-$bon2Version-CUSTOM-all.jar"
        dest bon2File
        overwrite false
    }

    download.run {
        src sourceURL
        dest obfFile
        overwrite false
    }

    exec {
        commandLine 'java', '-jar', bon2File, '--inputJar', obfFile, '--outputJar', deobfFile, '--mcVer', minecraftVersion, '--mappingsVer', mappingsVer, '--notch'
        workingDir bon2Dir
    }

    return files(deobfFile)
}

def zipMappings(String zipPath, String url, String bon2Dir) {
    File zipFile = new File(zipPath)
    if (zipFile.exists()) {
        return
    }

    String fieldsCache = "$bon2Dir/data/fields.csv"
    String methodsCache = "$bon2Dir/data/methods.csv"

    download.run {
        src "${url}fields.csv"
        dest fieldsCache
    }
    download.run {
        src "${url}methods.csv"
        dest methodsCache
    }

    zipFile.getParentFile().mkdirs()
    ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(zipFile))

    zos.putNextEntry(new ZipEntry("fields.csv"))
    Files.copy(Paths.get(fieldsCache), zos)
    zos.closeEntry()

    zos.putNextEntry(new ZipEntry("methods.csv"))
    Files.copy(Paths.get(methodsCache), zos)
    zos.closeEntry()

    zos.close()
}
