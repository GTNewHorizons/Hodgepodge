package com.mitchej123.hodgepodge.mixins.late.bibliocraft;

import com.mitchej123.hodgepodge.Common;
import cpw.mods.fml.common.network.ByteBufUtils;
import io.netty.buffer.ByteBuf;
import jds.bibliocraft.Config;
import jds.bibliocraft.items.ItemAtlas;
import jds.bibliocraft.network.ServerPacketHandler;
import jds.bibliocraft.tileentities.TileEntityMapFrame;
import net.minecraft.entity.player.EntityPlayerMP;
import net.minecraft.item.ItemMap;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.nbt.NBTTagList;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.Unique;
import org.spongepowered.asm.mixin.injection.At;
import org.spongepowered.asm.mixin.injection.Inject;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;

/*
 * Merged from ModMixins under the MIT License
 *    Copyright bartimaeusnek & GTNewHorizons
 */
@Mixin(ServerPacketHandler.class)
public class MixinBibliocraftPatchPacketExploits {

    @Inject(method = "transferWaypointsToAtlas", at = @At("HEAD"), remap = false, cancellable = true)
    private void hodgepodge$fixTransferWaypointsToAtlas(
            TileEntityMapFrame frameTile, ItemStack atlasStack, EntityPlayerMP player, CallbackInfo c) {
        if (!(atlasStack.getItem() instanceof ItemAtlas)) {
            this.kickAndWarn(player, c, "BiblioAtlasGive");
        }
    }

    @Inject(method = "handleAtlasSwapUpdate", at = @At("HEAD"), remap = false, cancellable = true)
    private void hodgepodge$fixHandleAtlasSwapUpdate(ByteBuf packet, EntityPlayerMP player, CallbackInfo c) {
        packet.markReaderIndex();
        final ItemStack insecureStack = ByteBufUtils.readItemStack(packet);
        if (insecureStack == null) return;
        packet.resetReaderIndex();

        NBTTagCompound tags = insecureStack.getTagCompound();
        if (tags == null) return;

        NBTTagList inventoryTagList = tags.getTagList("Inventory", 10);
        if (inventoryTagList == null) return;
        for (int i = 0; i < inventoryTagList.tagCount(); i++) {
            if (!(ItemStack.loadItemStackFromNBT(inventoryTagList.getCompoundTagAt(i))
                            .getItem()
                    instanceof ItemMap)) {
                kickAndWarn(player, c, "BiblioFrameGive");
            }
        }
    }

    @Inject(method = "handleBookEdit", at = @At("HEAD"), remap = false, cancellable = true)
    private void hodgepodge$fixHandleBookEdit(ByteBuf packet, EntityPlayerMP player, CallbackInfo c) {
        packet.markReaderIndex();
        ItemStack insecureStack = ByteBufUtils.readItemStack(packet);
        packet.resetReaderIndex();
        String namePrior = insecureStack.getDisplayName();
        insecureStack.func_135074_t();
        String nameAfter = insecureStack.getDisplayName();
        if (!namePrior.equals(nameAfter) && !Config.testBookValidity(insecureStack)) {
            this.kickAndWarn(player, c, "BiblioTableGive");
        }
    }

    @Unique
    private void kickAndWarn(EntityPlayerMP player, CallbackInfo c, String exploitName) {
        player.playerNetServerHandler.kickPlayerFromServer(
                player.getDisplayName() + " tried to cheat with \"" + exploitName + "\"-Exploit!");
        Common.log.error(player.getDisplayName() + " tried to cheat with \"" + exploitName + "\"-Exploit!");
        c.cancel();
    }
}
